import java.util.Arrays;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class BackTrackingHelp {

	public static void main(String[] args) {
		int[] arr = { 10, 2, 3, 4, 5, 8, 1, 1 };
		char[] carr = { 'a', 'b', 'c' };
		
	}

	
	// find-all-n-digit-numbers-given-sum-digits
	public static void DigitGivenNumbers(int noOfcall, int sum, int sumsf, String asf) {
		if (noOfcall == 0) {
			if (sumsf == sum) {
				count++;
				System.out.println(count + ". " + asf);
				return;
			} else {
				return;
			}
		}

		for (int i = 0; i <= 9; i++) {
			DigitGivenNumbers(noOfcall - 1, sum, sumsf + i, asf + i);
		}
	}

	// find-n-digit-binary-numbers-having-more-one-than-zero
	public static void digitBinary(int n, String asf) {
		if (n == 0) {
			System.out.println(asf);
			return;

		}
		digitBinary(n - 1, asf + '1');
		digitBinary(n - 1, asf + '0');
	}

	public static void permutations(boolean[] boxes, int queens, int qpsf, String asf) {
		if (qpsf == queens) {
			System.out.println(asf);
			return;
		}
		for (int box = 0; box < boxes.length; box++) {
			if (boxes[box] == false) {
				boxes[box] = true;
				permutations(boxes, queens, qpsf + 1, asf + "q" + (qpsf + 1) + "b" + box);
				boxes[box] = false;
			}
		}
	}

	public static void Combinations(int[] arr, int k, String asf, int lb) {
		if (k == 0) {
			System.out.println(count++ + "." + asf);
			return;
		}
		for (int i = lb + 1; i < arr.length; i++) {
			Combinations(arr, k - 1, asf + arr[i], i);
		}
	}

	// Print all possible strings of length k formed from a set of n characters
	public static void possibleStringOfLengthK(char[] arr, int k, String asf) {
		if (k + 1 == asf.length()) {
			System.out.println(asf);
			return;
		}
		for (int i = 0; i < arr.length; i++) {
			possibleStringOfLengthK(arr, k, asf + arr[i]);

		}
	}

	public static void subString(String s, String asf) {
		if (s.length() == 0) {
			return;
		}
		for (int i = 0; i < s.length(); i++) {
			asf = asf + s.charAt(i);
			System.out.println(asf);
		}
		subString(s.substring(1), " ");
	}

	// YAYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY!!!!!!!!!!!!!!!!!!!
	// I DID IT!!!!!
	public static void subsequencesWithASCII(String s, String sf) {
		if (s.length() == 0) {
			System.out.println(sf);
			return;
		}

		subsequencesWithASCII(s.substring(1), sf);
		subsequencesWithASCII(s.substring(1), sf + s.substring(0, 1));
		subsequencesWithASCII(s.substring(1), sf + (int) s.charAt(0));

	}

	// YAYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY!!!!!!!!!!!!!!!!!!!
	// I DID IT!!!!!
	public static void subsequences(String s, String sf) {
		if (s.length() == 0) {
			System.out.println(sf);
			return;
		}

		subsequences(s.substring(1), sf + s.charAt(0));
		subsequences(s.substring(1), sf);

	}

	public static void WildCardPattern(String str, String asf) {
		if (str.length() == 0) {
			System.out.println(asf);
			return;
		}
		if (str.charAt(0) == '?') {
			WildCardPattern(str.substring(1), asf + "0");
			WildCardPattern(str.substring(1), asf + "1");
		} else {
			WildCardPattern(str.substring(1), asf + str.charAt(0));
		}
	}

	static int count = 0;

	// n steps with 1 2 and 3 steps a time
	public static void Nsteps(int n, String asf, int[] arr) {
		if (n == 0) {
			count++;
			System.out.println(count + " " + asf);
			return;
		}
		if (n < 0) {
			return;
		}
		for (int i = 0; i < arr.length; i++) {
			Nsteps(n - arr[i], asf + "" + arr[i], arr);
		}
		// Nsteps(n - 1, asf + "" + "1");
		// Nsteps(n - 2, asf + "" + "2");
		// Nsteps(n - 3, asf + "" + "3");
	}

}
private class {
public class BackTracking {

	public static void main(String[] args) {

		int[] arr = { 1, 7, 6, 7, 8, 97, 4, 7, 7, 4, 5, 7, 6, 2, 0 };
		
		System.out.println("``````````");
		System.out.println("``````````");
		Q28(arr, 7, 2, "", -1);
		System.out.println("~~~~~~~~~~~~~~");
		PrintNnCombo(5, "");
		System.out.println("~~~~~~");
		PrintNnComboB(5, "", 1);
		System.out.println("~~~~~~");
		PrintNnComboC(5, "", 0);

	}

	// MISC.
	// 28.Given an array A[] and a number x, check for pair in A[] with sum as x
	private static void Q28(int[] arr, int x, int noPair, String asf, int lb) {
		// if (noPair == 0) {
		if (x == 0) {
			System.out.println(asf);
			return;
		}
		if (x < 0) {
			return;
		}
		// }
		// no. of positions -->base case
		// no. of choices --> calls

		for (int i = lb+1; i < arr.length; i++) {
			Q28(arr, x - arr[i], noPair - 1, asf + arr[i] + " ", i);
		}
	}

	private static void PrintNnCombo(int n, String asf) {
		if (n == 0) {
			System.out.println(asf);
			return;
		}
		if (n < 0) {
			return;
		}

		for (int i = 1; i <= n; i++) {
			PrintNnCombo(n - i, asf + i);
		}
	}

	private static void PrintNnComboB(int n, String asf, int l) {
		if (n == 0) {
			System.out.println(asf);
			return;
		}
		if (n < 0) {
			return;
		}

		for (int i = l; i <= n; i++) {
			PrintNnComboB(n - i, asf + i, i);
		}
	}

	private static void PrintNnComboC(int n, String asf, int l) {
		if (n == 0) {
			System.out.println(asf);
			return;
		}
		if (n < 0) {
			return;
		}

		for (int i = l + 1; i <= n; i++) {
			PrintNnComboC(n - i, asf + i, i);
		}
	}

}

}
